# -*- coding: utf-8 -*-
"""CYCLEGAN VANGOGH

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eLYnKdB4ZgAw5DaYp44C7yi4e3-UqOEV
"""

!pip install git+https://github.com/tensorflow/examples.git

import tensorflow as tf

#import tensorflow_datasets as tfds
from tensorflow_examples.models.pix2pix import pix2pix

import os
import time
import matplotlib.pyplot as plt
from IPython.display import clear_output

AUTOTUNE = tf.data.AUTOTUNE

os.environ["KAGGLE_USERNAME"] = "pallikadhingra"
os.environ["KAGGLE_KEY"] = "2155eaeb2bc1983bdcb70ae4d0c55faa"

!kaggle datasets download pipiking/cyclegan

!unzip /content/cyclegan.zip

import os
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import cv2
from tqdm import tqdm

train_vangogh = "/content/vangogh2photo/trainA"
train_photos = "/content/vangogh2photo/trainB"
images_height = 256
images_width = 256
#total_images = 4000

def random_crop(image):
  cropped_image = tf.image.random_crop(
      image, size=[images_height, images_width, 3])

  return cropped_image

def random_jitter(image):
  # resizing to 286 x 286 x 3
  image = tf.image.resize(image, [286, 286],
                          method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)

  # randomly cropping to 256 x 256 x 3
  image = random_crop(image)

  # random mirroring
  image = tf.image.random_flip_left_right(image)

  return image

images_vangogh = os.listdir(train_vangogh)
images_photos = os.listdir(train_photos)

n_vangogh = len(images_vangogh)
n_photos = len(images_photos)

n_vangogh = 40
n_photos = 10
batch_size = 1

images_vangogh_list = []
images_photos_list = []

for i in tqdm(range(n_vangogh)):
  img = cv2.imread(train_vangogh + "/" + images_vangogh[i])
  img = cv2.resize(img, (images_width, images_height))
  img=img/255.0 #normalisation
  images_vangogh_list.append(img)

for i in tqdm(range(n_photos)):
  img = cv2.imread(train_photos + "/" + images_photos[i])
  img = cv2.resize(img, (images_width, images_height))
  img=img/255.0 #normalisation
  images_photos_list.append(img)

images_vangogh_arr = np.array(images_vangogh_list)
#images_vangogh_arr = np.expand_dims(images_vangogh_arr, axis=0)  # Add batch dimension
#images_vangogh_arr = np.repeat(images_vangogh_arr, batch_size, axis=0)

images_photos_arr = np.array(images_photos_list)
#images_photos_arr = np.expand_dims(images_photos_arr, axis=0)  # Add batch dimension
#images_photos_arr = np.repeat(images_photos_arr, batch_size, axis=0)

sample = np.expand_dims(images_vangogh_arr[0],axis=0)

sample.shape

plt.subplot(121)
plt.title('vangogh')
plt.imshow(images_vangogh_arr[0])

plt.subplot(122)
plt.title('vangogh with random jitter')
plt.imshow(random_jitter(images_vangogh_arr[0]))

plt.subplot(121)
plt.title('real photo')
plt.imshow(images_photos_arr[0])

plt.subplot(122)
plt.title('real photo with random jitter')
plt.imshow(random_jitter(images_photos_arr[0]))

OUTPUT_CHANNELS = 3

generator_g = pix2pix.unet_generator(OUTPUT_CHANNELS, norm_type='instancenorm')
generator_f = pix2pix.unet_generator(OUTPUT_CHANNELS, norm_type='instancenorm')

discriminator_x = pix2pix.discriminator(norm_type='instancenorm', target=False)
discriminator_y = pix2pix.discriminator(norm_type='instancenorm', target=False)

sample_photo = np.expand_dims(images_photos_arr[2],axis=0)
sample_vangogh = np.expand_dims(images_vangogh_arr[4],axis=0)

to_vangogh = generator_g(sample_photo)
to_photo = generator_f(sample_vangogh)
plt.figure(figsize=(8, 8))
contrast = 3

imgs = [sample_photo, to_vangogh, sample_vangogh, to_photo]
title = ['Photo', 'To Vangogh', 'Vangogh', 'To Photo']

for i in range(len(imgs)):
  plt.subplot(2, 2, i+1)
  plt.title(title[i])
  if i % 2 == 0:
    plt.imshow(imgs[i][0])
  else:
    plt.imshow(imgs[i][0]*contrast)
plt.show()

plt.figure(figsize=(8, 8))

plt.subplot(121)
plt.title('Is a real vangogh?')
plt.imshow(discriminator_y(sample_vangogh)[0, ..., -1], cmap='RdBu_r')

plt.subplot(122)
plt.title('Is a real photo?')
plt.imshow(discriminator_x(sample_photo)[0, ..., -1], cmap='RdBu_r')

plt.show()

LAMBDA = 10

loss_obj = tf.keras.losses.BinaryCrossentropy(from_logits=True)

def discriminator_loss(real, generated):
  real_loss = loss_obj(tf.ones_like(real), real)

  generated_loss = loss_obj(tf.zeros_like(generated), generated)

  total_disc_loss = real_loss + generated_loss

  return total_disc_loss

def generator_loss(generated):
  return loss_obj(tf.ones_like(generated), generated)

def calc_cycle_loss(real_image, cycled_image):
  loss1 = tf.reduce_mean(tf.abs(real_image - cycled_image))

  return LAMBDA * loss1

def identity_loss(real_image, same_image):
  loss = tf.reduce_mean(tf.abs(real_image - same_image))
  return LAMBDA * loss

generator_g_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)
generator_f_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)

discriminator_x_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)
discriminator_y_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)

checkpoint_path = "./checkpoints/train"

ckpt = tf.train.Checkpoint(generator_g=generator_g,
                           generator_f=generator_f,
                           discriminator_x=discriminator_x,
                           discriminator_y=discriminator_y,
                           generator_g_optimizer=generator_g_optimizer,
                           generator_f_optimizer=generator_f_optimizer,
                           discriminator_x_optimizer=discriminator_x_optimizer,
                           discriminator_y_optimizer=discriminator_y_optimizer)

ckpt_manager = tf.train.CheckpointManager(ckpt, checkpoint_path, max_to_keep=5)

# if a checkpoint exists, restore the latest checkpoint.
if ckpt_manager.latest_checkpoint:
  ckpt.restore(ckpt_manager.latest_checkpoint)
  print ('Latest checkpoint restored!!')

EPOCHS = 10

def generate_images(model, test_input):
  prediction = model(test_input)

  plt.figure(figsize=(12, 12))

  display_list = [test_input[0], prediction[0]]
  title = ['Input Image', 'Predicted Image']

  for i in range(2):
    plt.subplot(1, 2, i+1)
    plt.title(title[i])
    # getting the pixel values between [0, 1] to plot it.
    plt.imshow(display_list[i])
    plt.axis('off')
  plt.show()

@tf.function
def train_step(real_x, real_y):
  # persistent is set to True because the tape is used more than
  # once to calculate the gradients.
  with tf.GradientTape(persistent=True) as tape:
    # Generator G translates X -> Y
    # Generator F translates Y -> X.

    fake_y = generator_g(real_x, training=True)
    cycled_x = generator_f(fake_y, training=True)

    fake_x = generator_f(real_y, training=True)
    cycled_y = generator_g(fake_x, training=True)

    # same_x and same_y are used for identity loss.
    same_x = generator_f(real_x, training=True)
    same_y = generator_g(real_y, training=True)

    disc_real_x = discriminator_x(real_x, training=True)
    disc_real_y = discriminator_y(real_y, training=True)

    disc_fake_x = discriminator_x(fake_x, training=True)
    disc_fake_y = discriminator_y(fake_y, training=True)

    # calculate the loss
    gen_g_loss = generator_loss(disc_fake_y)
    gen_f_loss = generator_loss(disc_fake_x)

    total_cycle_loss = calc_cycle_loss(real_x, cycled_x) + calc_cycle_loss(real_y, cycled_y)

    # Total generator loss = adversarial loss + cycle loss
    total_gen_g_loss = gen_g_loss + total_cycle_loss + identity_loss(real_y, same_y)
    total_gen_f_loss = gen_f_loss + total_cycle_loss + identity_loss(real_x, same_x)

    disc_x_loss = discriminator_loss(disc_real_x, disc_fake_x)
    disc_y_loss = discriminator_loss(disc_real_y, disc_fake_y)

  # Calculate the gradients for generator and discriminator
  generator_g_gradients = tape.gradient(total_gen_g_loss,
                                        generator_g.trainable_variables)
  generator_f_gradients = tape.gradient(total_gen_f_loss,
                                        generator_f.trainable_variables)

  discriminator_x_gradients = tape.gradient(disc_x_loss,
                                            discriminator_x.trainable_variables)
  discriminator_y_gradients = tape.gradient(disc_y_loss,
                                            discriminator_y.trainable_variables)

  # Apply the gradients to the optimizer
  generator_g_optimizer.apply_gradients(zip(generator_g_gradients,
                                            generator_g.trainable_variables))

  generator_f_optimizer.apply_gradients(zip(generator_f_gradients,
                                            generator_f.trainable_variables))

  discriminator_x_optimizer.apply_gradients(zip(discriminator_x_gradients,
                                                discriminator_x.trainable_variables))

  discriminator_y_optimizer.apply_gradients(zip(discriminator_y_gradients,
                                                discriminator_y.trainable_variables))

for epoch in range(200):
  start = time.time()

  n = 0
  for image_x, image_y in zip(np.expand_dims(images_photos_arr, axis = 0).astype(np.float32), np.expand_dims(images_vangogh_arr, axis = 0).astype(np.float32)):
    train_step(image_x, image_y)
    if n % 10 == 0:
      print ('.', end='')
    n += 1

  clear_output(wait=True)
  # Using a consistent image (sample_horse) so that the progress of the model
  # is clearly visible.
  generate_images(generator_g, sample_photo)

  if (epoch + 1) % 5 == 0:
    ckpt_save_path = ckpt_manager.save()
    print ('Saving checkpoint for epoch {} at {}'.format(epoch+1,
                                                         ckpt_save_path))

  print ('Time taken for epoch {} is {} sec\n'.format(epoch + 1,
                                                      time.time()-start))

test_images = "/content/vangogh2photo/testB"

test_images_photos = os.listdir(test_images)

n_images_test = 20

test_images_photos_list = []

for i in tqdm(range(n_images_test)):
  img = cv2.imread(test_images + "/" + test_images_photos[i])
  img = cv2.resize(img, (images_width, images_height))
  img=img/255.0 #normalisation
  test_images_photos_list.append(img)

test_images_photos_arr = np.array(test_images_photos_list)

inp = np.expand_dims(test_images_photos_arr[15],axis=0)

# Run the trained model on the test dataset

generate_images(generator_g, inp)

